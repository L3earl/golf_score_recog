- 처리 속도 늘리는 방법들 
지금 코드는 GPU한개의 처리 능력을 다 쓰는거 같은데? 여러개 동시에 들어오면 훨씬 느려짐. 실서비스를 위해 속도 늘리려면 어떻게 하나
1. 좋은 GPU를 여러장 사서 분산처리 한다
2. 속도를 조금이라도 증가시키려면 중요도가 낮은 total, sum 빼버리기
3. 딥러닝 모델이 아닌 아주 옛날 CV 방식을 사용한다 (아마 빠를 듯? )- 다만 2자리수, 음수는 인식 못하는 문제 풀어야 함
3-1. 좌표에 맞춰서 2자리수, 음수를 분리하여 1자리수 양수로 만든 후에 적용 (초 하드코딩)
3-2. 2자리수는 포기하고, 음수만 학습시킨 버전을 다시 만듦 (2자리수는 중요도가 높진 않은데다가, 학습을 위해서는 10~99?까지 가능한 수의 디자인이 다 있어야 함)
4. 지금 모델보다 빠르고, 정확도는 100% 나오는 모델을 노가다로 찾는다 (결과가 나올 수 있을지 없을지 명확하지 않음)


- 인사이트 
1018 인사이트
케이스3이 4개로 분화됨에 따라 전체 케이스가 7개가 되었음 (case1,2,3_1~3_4,예외)
좌표를 6개를 따야함
하드코딩과 별의별 설정값들이 난무하여, 유지보수할때 왜 이렇게 했지? 하고 이해 못하는 케이스들이 늘어남 -> 병신 코드가 됨 -> 케이스가 늘어날때마다 하드코딩이 늘어남
접근 방식이 잘 못 되었음을 느낌
테이블을 자름 -> 테이블 내 숫자를 한번에 인식 
이렇게 2가지로 task을 나누면 좋았을 것 같다, 이렇게하면 정말 예외적인 케이스 외에는 하드코딩할 필요 없음. 나중에 개선하게 되면 고려해 볼 것
물론 현재 시점에 위 2개 task는 (왜인지는 완벽히 이해하지는 못했지만) 최신 모델로도 잘 안되고는 있다. 연구가 필요함
코딩시작하기 전 조사&분석&기획에 좀 더 시간을 썼어야 했다고 봄 (어디가 어려운가? 이렇게 진행하면 어떤 결과가 나올지? 고민을 미리했으면 좋알승ㄹ 듯 근데 뭐 지금은 경험 자체가 부족하니 어떨 수 없었을지도)

방향성에 대한 고민
1. 최신 범용 모델을 먼저 테스트한다 (이건 잘 했음)
위에서 잘 못하면 최신 모델로도 어려운 task 라는 뜻
2. 왜 최신 범용 모델들이 잘 못하는가? (를 먼저 공부해야 했음)
이 task를 모델이 못하는 이유는 무엇인가? 
이 task를 쪼개서 특화된 모델들을 써서, 결과를 내고, 그결과를 합친다고 할때, 어느 정도까지는 모델들이 할 수 있나? (=그 task를 하는 모델이 존재하는가)
즉, OCR을 잘 하려면 어떻게 해야 하지? OCR모델들의 동작방식 (레이아웃)과 제약점 같은건 뭔지 알았어야 함
3. 위에서 최대한 적게 쪼갠 task를 하는 특화 모델로 테스트해봐야 함
그리고 안되면 이유 찾고, 더 쪼개고 했어야 함
하드코딩 (설정값 포함)이 가장 적은 방식을 생각해서 했어야 함

+ 여러 케이스를 미리 상상하거나 수집했어야 함

단일 라인 최적..같은 거 레이아웃이 문제라는 것 등 모델의특장점을 쓰기 전에 알았으면 좋았을듯

작동방식을 알고, 내 예상과 빗나간 부분과의 차이를 비교했어야 했다! (-1과 4의 차이)

AI로 코딩할때 주의할 점을 발견함 
1. 내가 말하지 않았는데 자기가 필요하다고 생각한 코드를 추가함 (룰로 제한해야 할 듯)
2. 내가 말한 의도를 파악하지 못한 채로 코딩하는 경우가 많으므로 먼저 물어봐야 함
3. 의도를 확인하고 코딩을 시켜도 결과물이 좀 다를 수 있음 (갑자기 음수인 숫자를 제외한다던지), 매 기능마다 TDD를 해줘야함


리펙토링 룰도 만들어야겠다
- 디버깅 해야 하는 부분에 로깅시스템 적용 (만약 print가 있다면 변경)
- 구글 스타일의 닥스트링 달기 (해당 파일, 함수, 객체가 만들어진 의도도 달기)
- 설정 및 민감 정보 분리 (환경설정, config나 .env로 옮길 수 있는 하드코딩 한 것들 옮기기)
- 불필요한 코드 삭제 (Clean Code, 지금 안 쓰는 코드, 주석처리된 코드)
- 중복 코드 제거 (DRY 원칙)
- 함수 및 클래스 분리 (SRP 원칙)

중요한 것은 
- 기능(동작)을 절대 변경하지 않는다 (The Golden Rule)
리펙토링 전과 후의 실행 결과가 100% 동일해야 함
- KISS (Keep It Simple, Stupid) 단순하게 
- YAGNI (You Ain't Gonna Need It): '나중에 필요할 것 같아서' 미리 기능을 만들지 않음
- 한번에 다 하려 하지 말고 작은 단위로 나누어서 할 것 