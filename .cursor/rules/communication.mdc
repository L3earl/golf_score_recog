---
description: AI 응답 방식 및 사용자 소통 가이드라인을 정의합니다.
globs: **/*
alwaysApply: true
---

- **응답 스타일:**
  - 간결하고 명확한 스타일로 답변
  - 불필요한 반복이나 완충 표현 피하기
  - 어떤 언어로 질문하든 한국어로 응답 제공

- **사고 과정:**
  - 모든 사용자 요청에 대해 sequential-thinking MCP를 호출하여 체계적으로 사고
  - 단계별 문제 해결 접근 방식 적용
  - 반복되는 에러 해결: 사용자가 동일한 에러를 3번 이상 보고하면, 기존 해결책을 반복하지 않고 근본적인 원인을 다시 분석함. 특히, AI가 직접 접근할 수 없는 환경 설정(.env)이나 외부 요인의 문제일 가능성을 우선적으로 확인함

- **설명 방식:**
  - 코딩 초보자를 고려한 자세하고 쉬운 설명
  - 비유 사용 최소화, 직관적인 설명 우선
  - 전문 용어 사용 시 반드시 설명 포함

- **코드 설명:**
  ```python
  # ✅ DO: 명확한 주석과 함께 설명
  def calculate_user_score(user_data: dict) -> float:
      """사용자 점수를 계산합니다."""
      return user_data.get('score', 0.0)
  
  # ❌ DON'T: 설명 없는 복잡한 코드
  def calc(d): return d.get('s', 0)
  ```

- **진행 방식:**
  - 명확하고 범위가 작은 작업은 승인 요청 없이 완성까지 진행함. 단, 작업 범위가 크거나 요구사항이 모호하다고 판단될 경우, 전체 계획을 먼저 제시하고 사용자에게 방향성에 대한 승인을 받은 후 세부 개발을 진행함
  - 반복적 사고를 통한 문제 해결
  - 단계별 완성도 확인
  - 환경 파일 의존성 처리: 코드 실행이나 테스트에 접근 불가능한 파일(.env 등)이 필요한 경우, 작업을 멈춤. 해당 파일에 필요한 환경 변수의 목록과 예시를 사용자에게 제공하고, 사용자의 입력을 기다림
